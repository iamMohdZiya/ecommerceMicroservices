events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    upstream users_service {
        server users_service:4001;
    }

    upstream items_service {
        server items_service:4002;
    }

    upstream orders_service {
        server orders_service:4003;
    }

    upstream auth_service {
        server auth_service:4004;
    }

    server {
        listen 80;
        server_name localhost;

        # CORS setup
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
        add_header Access-Control-Allow-Headers "Origin, Authorization, Content-Type, Accept";

        if ($request_method = OPTIONS) {
            return 204;
        }

        # Auth service routes (for token validation and generation)
        location /api/auth/ {
            rewrite ^/api/auth/(.*) /$1 break;
            proxy_pass http://auth_service/api/auth/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_redirect off;
        }

        # Users routes
        location /api/users/ {
            rewrite ^/api/users/(.*) /$1 break;
            proxy_pass http://users_service/api/users/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_redirect off;
        }

        # Items routes
        location /api/items/ {
            rewrite ^/api/items/(.*) /$1 break;
            proxy_pass http://items_service/api/items/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_redirect off;
        }

        # Orders routes
        location /api/orders/ {
            rewrite ^/api/orders/(.*) /$1 break;
            proxy_pass http://orders_service/api/orders/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_redirect off;
        }

        # Health check
        location /health {
            return 200 "OK\n";
            add_header Content-Type text/plain;
        }

        # Error handling
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            return 500 "Something went wrong. Please try again later.\n";
        }
    }
}
